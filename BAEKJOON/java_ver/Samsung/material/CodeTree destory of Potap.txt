No enclosing instance of type Main is accessible. Must qualify the allocation with an enclosing instance of type Main (e.g. x.new A() where x is an instance of Main).

import java.util.*;

class Potap{
    int x, y, attack, recent;
    boolean involve = false;

    public Potap(int x, int y, int attack, int tempAttack, int recent){
        this.x = x;
        this.y = y;
        this.attack = attack;
        this.recent  = recent;
    }

    @Override
    public String toString(){
        return "x: " + this.x + " y: " + this.y + " attack: " +this.attack + " recent " +this.recent + "   ";
    }

}

public class Main {

    private static int N, M, K;
    private static List<Potap> listPotap = new ArrayList<>();
    private static Potap[][] boardMap;
    private static boolean[][] visit;
    private static int[] dx = {0,1,0,-1}, dy = {1,0,-1,0};
    private static int[] dx2 = {0,1,0,-1,-1,-1,1,1}, dy2 = {1,0,-1,0,-1,1,-1,1};


    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        K = sc.nextInt();
        boardMap = new Potap[N][M];
        visit = new boolean[N][M];

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                int attack = sc.nextInt();
                Potap potap = new Potap(i, j, attack,0,0);
                listPotap.add(potap);
                boardMap[i][j] = potap;
            }
        }
        
        solution();

    }

    static void solution(){
        /* 예제
        4 4 1
        0 1 4 4
        8 0 10 13
        8 0 11 26
        0 0 0 0  
        */
    	
    	for(int turn=0; turn<2; turn++) {
	        //공격자 및 피 공격자 선정
	        Potap potap_attack = pickWeak();
	        System.out.println("약한거" + potap_attack);
	        Potap potap_receive = pickStrong();
	        System.out.println("강한거" + potap_receive);
	
	        //공격자의 공격 및 부서짐
	        LetsAttack(potap_attack, potap_receive);
	
	        //포탑 정비
	        arrangement(potap_attack, potap_receive);
	        print2D();
    	}


    }

    static Potap pickWeak(){

        Collections.sort(listPotap, new Comparator<Potap>(){
            @Override
            public int compare(Potap o1, Potap o2){
                
                if(o1.attack == o2.attack){
                    
                    if(o1.recent == o2.recent){
                        if((o1.x+o1.y)==(o2.x+o2.y)){
                            return o2.y - o1.y;
                        }

                        return (o2.x+o2.y) - (o1.x+o1.y); 
                    }

                    return o1.recent - o2.recent;
                }

                return o1.attack - o2.attack;
            }

        });

        for(int i=0; i<listPotap.size(); i++){
            if(listPotap.get(i).attack !=0){
                Potap potap = listPotap.get(i);
                potap.attack = potap.attack + N+M;
                potap.involve = true;
                potap.recent +=1; //공격 횟수 한 번 늘려주고 
                return potap;
            }
        }

        return null;
    }

    static Potap pickStrong(){

        Collections.sort(listPotap, new Comparator<Potap>(){
            @Override
            public int compare(Potap o1, Potap o2){
                
                if(o1.attack == o2.attack){
                    
                    if(o1.recent == o2.recent){
                        if((o1.x+o1.y)==(o2.x+o2.y)){
                            return o1.y - o2.y; //열 값이 가장 작은 
                        }

                        return (o1.x+o1.y) - (o2.x+o2.y); //행과 열의 합이 가장 작은
                    }

                    return o2.recent - o1.recent; //가장 오래된 포탑
                }

                return o2.attack - o1.attack; // 가장 강한 포탑
            }

        });

        return listPotap.get(0);
    }

    static void LetsAttack(Potap source, Potap target){
    	
    	//Laser Attack
    	 List<int[]> attackedTrack = bfs(source, target);
    	 
    	 if(attackedTrack.size()!=0) {
	    	 for(int i=0; i<attackedTrack.size(); i++) {
	    		 int[] attackedNode = attackedTrack.get(i);
//	    		 System.out.println(attackedTrack.get(i)[0] + " " +  attackedTrack.get(i)[1]);
	    		 
	    		 if(attackedNode[0] == target.x && attackedNode[1] == target.y) {
	    			 target.attack = target.attack-source.attack;
	    			 if(target.attack<0) target.attack = 0;
	    			 target.involve = true; //전쟁에 연루됨 
	    		 }else {
	    			 boardMap[attackedNode[0]][attackedNode[1]].attack -= (int) source.attack/2;
	    			 boardMap[attackedNode[0]][attackedNode[1]].involve = true; //전쟁에 연루됨.
	    		 }
	    	 }
	    	 
    	 }else {
        	 //PotanAttack
    		 target.attack = target.attack - source.attack;
    		 if(target.attack<0) target.attack = 0;
    		 
    		 for(int i=0; i<8; i++) {
    			 int attacked_x = target.x + dx2[i];
    			 int attacked_y = target.y + dy2[i];

                 if(attacked_x<0 || attacked_x>=N) attacked_x = (attacked_x+N)%N;
                 if(attacked_y<0 || attacked_y>=M) attacked_y = (attacked_y+M)%M;
                 
    			 boardMap[attacked_x][attacked_y].attack -= (int) source.attack/2;
    			 if(boardMap[attacked_x][attacked_y].attack<0) boardMap[attacked_x][attacked_y].attack=0;
    		 }
    		 
    	 }
    	 
    }
  
    static void arrangement(Potap source, Potap target) {
    	for(int i=0; i<listPotap.size(); i++) {
    		Potap potap = listPotap.get(i);
    		if(potap.attack ==0) continue;
    		if(potap.x == source.x && potap.y == source.y) continue;
    		if(potap.x == target.x && potap.y == target.y) continue;
    		if(!potap.involve) {
    			potap.attack+=1;
    		} 	
    		else {
    			potap.involve = false; //다시 원상복귀.
    		}
    	}
    }
    
    
    
    /****************** common Utility (시간이 오래 걸림 파악되지 않은 문제로) ******************/
    static List<int[]> bfs(Potap source, Potap target){

        Queue<BfsNode> Q = new LinkedList<>();

        //board랑 동기화 하는거 꼭!!!
        Q.add(new BfsNode(source.x, source.y));
        
        while(!Q.isEmpty()){

            BfsNode node = Q.poll();

            if(node.x == target.x && node.y == target.y){
                return node.tracks;
            }
            
            for(int i=0; i<4; i++){

                int new_x = node.x + dx[i];
                int new_y = node.y + dy[i];

                if(new_x<0 || new_x>=N) new_x = (new_x+N)%N;
                if(new_y<0 || new_y>=M) new_y = (new_y+M)%M;
                
                if(visit[new_x][new_y] == true) continue;
                if(boardMap[new_x][new_y].attack == 0) continue;

                //방문 기록
                visit[new_x][new_y] = true;
                
                //방문한 새로운 노드와 track만들기
                BfsNode newNode = new BfsNode(new_x, new_y);
                int[] newArray = new int[] {new_x, new_y};
                newNode.copyAndAddTracks(node.tracks, newArray);
                
                //Q에 추가하기
                Q.add(newNode);

            }
        }
		return null;

        }
    
    static void print2D() {
    	for(int i=0; i<boardMap.length; i++) {
    		for(int j=0; j<boardMap[0].length; j++) {
    			System.out.print(boardMap[i][j].attack + " ");
    		}
    		System.out.println();
    	}
    	System.out.println();
    	
    }
   }


    class BfsNode{
        int x, y;
        List<int[]> tracks = new ArrayList<>();

        public BfsNode(int x, int y){
            this.x = x;
            this.y = y;
        }
        
        public void copyAndAddTracks(List<int[]> oldTracks, int[] newArray){
        	for(int i=0; i<oldTracks.size(); i++) {
        		tracks.add(oldTracks.get(i));
        	}
        	tracks.add(newArray);
        }
    }


이 코드가 weak뽑고나서 동시에 반영해버려셔 강자뽑을때도 반영되어버림..


	static boolean checkRest() {
		List<Potap> semiAnswer = new ArrayList<>();
		Potap lastPotap;
		for(int i=0; i<listPotap.size(); i++) {
			if(listPotap.get(i).attack!=0) {
				lastPotap = listPotap.get(i);
				semiAnswer.add(listPotap.get(i));
			}
		}
		if(semiAnswer.size()==1) {
			System.out.println(lastPotap.attack);
			return true;
		}
	}


10 10 20
995 3976 1850 0 0 0 0 0 2823 0
0 2197 4554 0 3991 0 0 0 0 0
2243 918 206 2051 0 0 0 0 0 2354
0 0 2211 394 3896 2763 0 0 3580 3094
0 0 4364 0 0 0 0 0 0 4990
0 0 0 0 0 0 736 0 1159 0
1374 0 2610 3165 3653 0 2651 0 0 0
4493 0 1423 0 2416 0 0 0 3580 0
0 4112 3779 0 3654 1247 0 0 132 712
92 2643 1459 4675 4838 0 2539 850 2040 2153


10 10 20
995 3976 1850 0 0 0 0 0 2823 0
0 2197 4554 0 3991 0 0 0 0 0
2243 918 206 2051 0 0 0 0 0 2354
0 0 2211 394 3896 2763 0 0 3580 3094
0 0 4364 0 0 0 0 0 0 4990
0 0 0 0 0 0 736 0 1159 0
1374 0 2610 3165 3653 0 2651 0 0 0
4493 0 1423 0 2416 0 0 0 3580 0
0 4112 3779 0 3654 1247 0 0 132 712
92 2643 1459 4675 4838 0 2539 850 2040 2153
4093


4168
  
    static void arrangement(Potap source, Potap target) {
    	for(int i=0; i<listPotap.size(); i++) {
    		Potap potap = listPotap.get(i);
    		
    		//여기서 continue해버리면 안되고 (마지막쯤 알았음) -> true로 바꿔주고 continue해줘야함
    		if(potap.attack ==0) continue;
    		if(potap.x == source.x && potap.y == source.y) {
    			potap.involve = false;
    			continue;
    		}
    		else if(potap.x == target.x && potap.y == target.y) {
    			target.involve = false;
    			continue;
    		}
    		else if(!potap.involve) {
    			potap.attack+=1;
    		} 	
    		else {
    			potap.involve = false; //다시 원상복귀.
    		}
    	}
    }
    
    

이거 또 동시성 문제네 그 아래에서 !potap.invlove할때 또 위에서 한게 반영되네

4 4 100
0 1 4 4
8 0 10 13
8 0 11 26
0 0 0 0